package com.example.sit305_61d.ui.screens

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.sit305_61d.ui.theme.*
import com.example.sit305_61d.viewmodel.TaskDetailsUiModel
import com.example.sit305_61d.viewmodel.TaskQuestionUiModel
import com.example.sit305_61d.viewmodel.TaskViewModel
import android.util.Log
import androidx.compose.material3.Text
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.collectAsState

@Composable
fun TaskScreen(
    onSubmit: () -> Unit,
    viewModel: TaskViewModel
) {
    Log.d("TaskScreenComposable", "TaskScreen composable function started.")

    // Remove temporary Box:
    /*
    Box(...) { Text(...) }
    */

    // --- Restore original content ---
    val uiState by viewModel.uiState.collectAsState()
    val context = LocalContext.current
    val task = uiState.taskDetails

    LaunchedEffect(uiState.navigateToResults) {
        if (uiState.navigateToResults) {
            onSubmit()
            viewModel.onSubmissionHandled()
        }
    }

    LaunchedEffect(uiState.errorMessage) {
        uiState.errorMessage?.let {
            Toast.makeText(context, it, Toast.LENGTH_LONG).show()
            viewModel.onErrorMessageHandled()
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(appBackgroundGradient)
    ) {
        if (uiState.isLoading) {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        } else if (task != null) {
            Column(modifier = Modifier.fillMaxSize()) {
                // ... LazyColumn, Button etc (Ensure this full structure is present) ...
                 LazyColumn(
                    modifier = Modifier
                        .weight(1f)
                        .padding(horizontal = 16.dp),
                    contentPadding = PaddingValues(top = 32.dp, bottom = 16.dp)
                ) {
                    item {
                        if (task.isAiGenerated) {
                            Text(
                                text = "âœ¨ Generated by AI",
                                fontSize = 14.sp,
                                color = TextColorSecondary,
                                modifier = Modifier.padding(bottom = 4.dp)
                            )
                        }
                        Text(
                            text = task.title,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            color = TextColorPrimary
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = task.description,
                            fontSize = 14.sp,
                            color = TextColorSecondary
                        )
                        Spacer(modifier = Modifier.height(24.dp))
                    }

                    itemsIndexed(task.questions, key = { _, q -> q.id }) { index, question ->
                        QuestionCard(
                            questionIndex = index + 1,
                            question = question,
                            selectedOptionIndex = uiState.selectedAnswers[question.id],
                            onOptionSelected = { optionIndex ->
                                viewModel.onAnswerSelected(question.id, optionIndex)
                            },
                            enabled = !uiState.isSubmitting
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                    }
                }

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color.Transparent)
                        .padding(horizontal = 16.dp, vertical = 24.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Button(
                        onClick = viewModel::onSubmitClicked,
                        modifier = Modifier.fillMaxWidth().height(50.dp),
                        shape = RoundedCornerShape(8.dp),
                        enabled = uiState.selectedAnswers.size == task.questions.size && !uiState.isSubmitting,
                        colors = ButtonDefaults.buttonColors(containerColor = AppPrimaryColor)
                    ) {
                        if (uiState.isSubmitting) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(24.dp),
                                color = Color.White,
                                strokeWidth = 3.dp
                            )
                        } else {
                            Text("Submit", color = Color.White, fontSize = 18.sp)
                        }
                    }
                }
            }
        } else {
            Box(modifier = Modifier.fillMaxSize().padding(16.dp), contentAlignment = Alignment.Center) {
                Text("Task could not be loaded.", color = TextColorPrimary)
            }
        }
    }
    // --- End of original content ---
}

@Composable
fun QuestionCard(
    questionIndex: Int,
    question: TaskQuestionUiModel,
    selectedOptionIndex: Int?,
    onOptionSelected: (Int) -> Unit,
    enabled: Boolean
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0x4DFFFFFF))
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.SpaceBetween, modifier = Modifier.fillMaxWidth()) {
                Text(
                    text = "$questionIndex. ${question.questionText}",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = if (enabled) TextColorPrimary else TextColorPrimary.copy(alpha = 0.6f)
                )
                Box(
                    modifier = Modifier
                        .size(24.dp)
                        .background(
                            color = if (selectedOptionIndex != null) AppPrimaryColor else Color.Gray,
                            shape = CircleShape
                        )
                        .then(if (!enabled) Modifier.alpha(0.6f) else Modifier)
                )
            }
            question.description?.let {
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = it,
                    fontSize = 14.sp,
                    color = if (enabled) TextColorSecondary else TextColorSecondary.copy(alpha = 0.6f)
                )
            }
            Spacer(modifier = Modifier.height(16.dp))

            question.options.forEachIndexed { index, option ->
                Row(
                    Modifier
                        .fillMaxWidth()
                        .selectable(
                            selected = (selectedOptionIndex == index),
                            onClick = { if (enabled) onOptionSelected(index) },
                            enabled = enabled
                        )
                        .padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    RadioButton(
                        selected = (selectedOptionIndex == index),
                        onClick = { if (enabled) onOptionSelected(index) },
                        enabled = enabled,
                        colors = RadioButtonDefaults.colors(
                            selectedColor = AppPrimaryColor,
                            unselectedColor = TextColorPrimary,
                            disabledSelectedColor = AppPrimaryColor.copy(alpha = 0.6f),
                            disabledUnselectedColor = TextColorPrimary.copy(alpha = 0.6f)
                        )
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = option,
                        color = if (enabled) TextColorPrimary else TextColorPrimary.copy(alpha = 0.6f)
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun TaskScreenPreview() {
    // Preview will break because it needs a TaskViewModel instance now.
    // We can fix this later or provide a dummy instance if needed for previews.
    /*
    val dummyTask = TaskDetailsUiModel(
        id = "task1",
        title = "Preview Task 1",
        description = "Preview Description",
        isAiGenerated = true,
        questions = listOf(
            TaskQuestionUiModel(
                id = "q1",
                questionText = "Preview Question 1",
                description = "Desc 1",
                options = listOf("Ans 1", "Ans 2", "Ans 3")
            ),
            TaskQuestionUiModel(
                id = "q2",
                questionText = "Preview Question 2",
                description = null,
                options = listOf("Opt A", "Opt B")
            )
        )
    )
    SIT305_61DTheme {
        Column(Modifier.background(appBackgroundGradient).padding(16.dp)) {
            QuestionCard(1, dummyTask.questions[0], 0, {}, true)
            Spacer(modifier = Modifier.height(16.dp))
            QuestionCard(2, dummyTask.questions[1], null, {}, true)
        }
    }
    */
}
